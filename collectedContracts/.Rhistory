library(reshape2)
suppressPackageStartupMessages(library(dplyr))
library(ggplot2)
folder <- "D:/Dropbox/0_ISEP/TDMEI/spikes/collectSmartContractsFromEtherscan/collectedContracts"
file_list <- list.files(path=folder, pattern="*.sol")
data <- rbindlist(sapply(file_list, fread, simplify = FALSE, use.names = TRUE, idcol = "FileName"))
# data <- rbindlist(sapply(file_list, fread, simplify = FALSE, use.names = TRUE, idcol = "FileName"))
data <- rbindlist(sapply(file_list, fread, simplify = FALSE))
folder <- "D:/Dropbox/0_ISEP/TDMEI/spikes/collectSmartContractsFromEtherscan/collectedContracts"
file_list <- list.files(path=folder, pattern="*.sol", full.names = TRUE)
file_list[1]
file_list
data <- rbindlist(sapply(file_list, fread, simplify = FALSE, use.names = TRUE, idcol = "FileName"))
#data <- rbindlist(sapply(file_list, fread, simplify = FALSE, use.names = TRUE, idcol = "FileName"))
data <- rbindlist(sapply(file_list, fread, simplify = FALSE))
data
#data <- rbindlist(sapply(file_list, fread, simplify = FALSE, use.names = TRUE, idcol = "FileName"))
data <- rbindlist(sapply(file_list, fread))
data
#data <- rbindlist(sapply(file_list, fread, simplify = FALSE, use.names = TRUE, idcol = "FileName"))
data <- rbindlist(sapply(file_list))
data
install.packages("vroom")
library(vroom)
install.packages("vroom")
library(vroom)
library(data.table)
library(stringr)
library(reshape2)
suppressPackageStartupMessages(library(dplyr))
library(ggplot2)
library(vroom)
install.packages("vroom")
library(vroom)
library(data.table)
folder <- "D:/Dropbox/0_ISEP/TDMEI/spikes/collectSmartContractsFromEtherscan/collectedContracts"
file_list <- list.files(path=folder, pattern="*.sol", full.names = TRUE) # carrega o nome dos ficheiros num array de strings
file_list
#data <- rbindlist(sapply(file_list, fread, simplify = FALSE), use.names = TRUE, idcol = "FileName")
data <- vroom(file_list, .id = "FileName")
pkg <- c("stringr", "reshape2",  "dplyr", "ggplot2",  "magrittr", "data.table", "readtext")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
#library(vroom) #da sempre erro ao tentar instalar
library(readtext)
#library(vroom) #da sempre erro ao tentar instalar
library(readtext)
install.packages("readtext")
#library(vroom) #da sempre erro ao tentar instalar
library(readtext)
#library(vroom) #da sempre erro ao tentar instalar
library(readtext)
folder <- "D:/Dropbox/0_ISEP/TDMEI/spikes/collectSmartContractsFromEtherscan/collectedContracts"
file_list <- list.files(path=folder, pattern="*.sol", full.names = TRUE) # carrega o nome dos ficheiros num array de strings
file_list
# read in each .sol file in file_list and rbind them into a data frame called data
data <- do.call("rbind", lapply(file_list, function(x)  read.table(paste(folder, x, sep=''), header = TRUE, stringsAsFactors = FALSE)))
# read in each .sol file in file_list and rbind them into a data frame called data
data <- do.call("rbind", lapply(file_list, function(x)  read.table(paste(folder, x, sep=''), header = TRUE, stringsAsFactors = FALSE)))
data <- rbindlist(sapply(file_list, fread, simplify = FALSE), use.names = TRUE, idcol = "FileName")
#library(vroom) #da sempre erro ao tentar instalar
#library(readtext) #da sempre erro ao tentar instalar
library(data.table)
library(stringr)
library(reshape2)
suppressPackageStartupMessages(library(dplyr))
library(ggplot2)
data <- rbindlist(sapply(file_list, fread, simplify = FALSE), use.names = TRUE, idcol = "FileName")
install.packages("tm")
#library(vroom) #da sempre erro ao tentar instalar
#library(readtext) #da sempre erro ao tentar instalar
library(tm)
folder <- "D:/Dropbox/0_ISEP/TDMEI/spikes/collectSmartContractsFromEtherscan/collectedContracts"
#file_list <- list.files(path=folder, pattern="*.sol", full.names = TRUE) # carrega o nome dos ficheiros num array de strings
file_list <- list.files(path=folder, pattern="*.sol") # carrega o nome dos ficheiros num array de strings
file_list
docs <- VCorpus(DirSource(file_list))
#library(vroom) #da sempre erro ao tentar instalar
#library(readtext) #da sempre erro ao tentar instalar
library(tm)
#library(vroom) #da sempre erro ao tentar instalar
#library(readtext) #da sempre erro ao tentar instalar
library(tm)
install.packages("slam")
install.packages('devtools')
install.packages("devtools")
library(devtools)
library(devtools)
#library(vroom) #da sempre erro ao tentar instalar
#library(readtext) #da sempre erro ao tentar instalar
library(tm)
install.packages("NLP")
#library(vroom) #da sempre erro ao tentar instalar
#library(readtext) #da sempre erro ao tentar instalar
library(NLP)
library(tm)
sessionInfo()
install.packages("installr")
library(installr)
suppressPackageStartupMessages(library(installr))
check.for.updates.R()
install.R()
sessionInfo()
library("digest")
test_dir= "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContractsTest"
#filelist <- dir(test_dir, pattern = "JPG|AVI", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist <- dir(test_dir, pattern = "sol", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist
# a concise, vectorized solution
# http://stackoverflow.com/questions/14060423/how-to-vectorize-this-r-code-using-plyr-apply-or-similar
md5s<-sapply(filelist,digest,file=TRUE,algo="md5", length = 5000)
duplicate_files = split(filelist,md5s)
# now let's divide the list into duplicates ( length > 1) and uniques ( length - 1)
z = duplicate_files
z2 = sapply(z,function (x){length(x)>1})
z3 = split(z,z2)
head(z3$"TRUE")
length(z3$"TRUE")
length(z3$"FALSE")
lengths(z3$"TRUE")
length(z3$"TRUE")
library("digest")
test_dir= "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContractsTest"
#filelist <- dir(test_dir, pattern = "JPG|AVI", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist <- dir(test_dir, pattern = ".sol", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist
# a concise, vectorized solution
# http://stackoverflow.com/questions/14060423/how-to-vectorize-this-r-code-using-plyr-apply-or-similar
md5s<-sapply(filelist,digest,file=TRUE,algo="md5", length = 5000)
duplicate_files = split(filelist,md5s)
# now let's divide the list into duplicates ( length > 1) and uniques ( length - 1)
z = duplicate_files
z2 = sapply(z,function (x){length(x)>1})
z3 = split(z,z2)
head(z3$"TRUE")
length(z3$"TRUE")
length(z3$"FALSE")
lengths(z3$"TRUE")
install.packages("filesstrings")
library(filesstrings)
library(stringr)
library(filesstrings)
library("digest")
test_dir= "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContractsTest"
#filelist <- dir(test_dir, pattern = "JPG|AVI", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist <- dir(test_dir, pattern = ".sol", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist
# a concise, vectorized solution
# http://stackoverflow.com/questions/14060423/how-to-vectorize-this-r-code-using-plyr-apply-or-similar
md5s<-sapply(filelist,digest,file=TRUE,algo="md5", length = 5000)
duplicate_files = split(filelist,md5s)
# now let's divide the list into duplicates ( length > 1) and uniques ( length - 1)
z = duplicate_files
z2 = sapply(z,function (x){
length(x)>1
file.copy(x, "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/testFolder")
})
z3 = split(z,z2)
head(z3$"TRUE")
length(z3$"TRUE")
length(z3$"FALSE")
lengths(z3$"TRUE")
length(z3$"TRUE")
length(z3$"FALSE")
z
View(z)
library("digest")
test_dir= "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContractsTest"
#filelist <- dir(test_dir, pattern = "JPG|AVI", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist <- dir(test_dir, pattern = ".sol", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist
# a concise, vectorized solution
# http://stackoverflow.com/questions/14060423/how-to-vectorize-this-r-code-using-plyr-apply-or-similar
md5s<-sapply(filelist,digest,file=TRUE,algo="md5", length = 5000)
duplicate_files = split(filelist,md5s)
View(duplicate_files)
# now let's divide the list into duplicates ( length > 1) and uniques ( length - 1)
z = duplicate_files
z
View(duplicate_files)
duplicate_files = split(filelist,md5s)
# now let's divide the list into duplicates ( length > 1) and uniques ( length - 1)
z = duplicate_files
z
z2 = sapply(z,function (x){length(x)>1})
z2
z3 = split(z,z2)
z3
head(z3$"TRUE")
length(z3$"TRUE")
length(z3$"FALSE")
z
z2 = sapply(z,function (x){length(x)>1})
z2
z3 = split(z,z2)
z3
z3
z3$"TRUE"
dupes = z3$"TRUE"
dupes
View(dupes)
View(dupes)
for ( i in dupes){
print(i)
}
for ( i in dupes[1]){
print(i)
}
View(dupes)
dupes[1][1]
dupes[1][1]
dupes[1]
dupes[[1]]
dupes[[1]][1]
dupes[[1]][2]
dupes[[1]][1]
dupes[[1]][2]
View(dupes)
library("digest")
test_dir= "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContractsTest"
#filelist <- dir(test_dir, pattern = "JPG|AVI", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist <- dir(test_dir, pattern = ".sol", recursive=TRUE, all.files =TRUE, full.names=TRUE)
filelist
# a concise, vectorized solution
# http://stackoverflow.com/questions/14060423/how-to-vectorize-this-r-code-using-plyr-apply-or-similar
md5s<-sapply(filelist,digest,file=TRUE,algo="md5", length = 5000)
duplicate_files = split(filelist,md5s)
# now let's divide the list into duplicates ( length > 1) and uniques ( length - 1)
z = duplicate_files
z
z2 = sapply(z,function (x){length(x)>1})
z2
z3 = split(z,z2)
z3
head(z3$"TRUE")
length(z3$"TRUE")
dupes = z3$"TRUE"
dupes
dupes[[1]][1]
dupes[[1]][2]
length(z3$"FALSE")
lengths(z3$"TRUE")
for ( i in dupes[1]){
print(i[1])
}
print(i[1])
dupes[[1]][1]
print(i[2])
dupes[[1]][2]
print(i[3])
for ( i in dupes[1]){
print(i[3])
}
for ( i in dupes){
for (j in i){
print(j)
}
}
for ( i in dupes){
for (j in i){
print(j[1])
}
}
for ( i in dupes){
#for (j in i){
print(j)
#}
}
for ( i in dupes){
#for (j in i){
print(i)
#}
}
for ( i in dupes){
for (j in i){
print(j)
}
}
for ( i in dupes){
for (j in i){
print(j[[1]])
}
}
for (i in dupes){
for (j in i){
print(j)
match(j)
}
}
for (i in dupes){
for (j in i){
print(j)
match(j,i)
}
}
length(dupes)
for(i in length(dupes)) {
#for (i in dupes){
#for (j in i){
for (j in length(dupes[i])){
print(j)
#match(j,i)
}
}
for(i in length(dupes)) {
#for (i in dupes){
#for (j in i){
for (j in length(dupes[i])){
print(j)
#match(j,i)
}
}
dim(dupes)[1]
dupes[[1]]
dupes[[1]][]
dupes[[1]][]
dupes[[26]][]
dupes[[]][1]
for (i in length(dupes)){
#for (j in i){
print(dupes[[i]][1])
#match(j,i)
#}
}
dupes[[26]][]
for (i in 1:length(dupes)){
#for (j in i){
print(i)
print(dupes[[i]][1])
#match(j,i)
#}
}
for (i in 1:length(dupes)){
#for (j in i){
#print(i)
#print(dupes[[i]][1])
dupes[[i]][1] = NULL
#match(j,i)
#}
}
dupes
for (i in 1:length(dupes)){
#for (j in i){
#print(i)
#print(dupes[[i]][1])
dupes[[i]][-1]
#match(j,i)
#}
}
dupes
dupes = sapply(dupes,function (x){x[1]})
dupes
dupes = z3$"TRUE"
dupes
for (i in 1:length(dupes)){
#for (j in i){
#print(i)
#print(dupes[[i]][1])
list.remove(dupes[[i]][], dupes[[i]][1])
#match(j,i)
#}
}
dupes = list(dupes)
dupes
View(dupes)
dupes = z3$"TRUE"
for (i in 1:length(dupes)){
#for (j in i){
#print(i)
#print(dupes[[i]][1])
pop (dupes[[i]][1])
#match(j,i)
#}
}
for (i in 1:length(dupes)){
#for (j in i){
#print(i)
#print(dupes[[i]][1])
dupes[[i]][].remove(dupes[[i]][1])
#match(j,i)
#}
}
#for (j in i){
#print(i)
#print(dupes[[i]][1])
dupes[[i]].remove(dupes[[i]][1])
for (i in 1:length(dupes)){
#for (j in i){
#print(i)
#print(dupes[[i]][1])
dupes[[i]][-1]
#match(j,i)
#}
}
dupes
dupes
dupes[-1]
length(dupes)
dupes[-1]
length(dupes)
dupes[-1]
for (i in 1:length(dupes)){
for (j in 1:length(dupes[[i]][])){
print(i)
print(j)
#print(dupes[[i]][1])
#file.move("C:/path/to/file/some_file.txt", "C:/some/other/path") #library(filesstrings)
#match(j,i)
}
}
for (i in 1:length(dupes)){
for (j in 1:length(dupes[[i]][])){
print(i)
print(j)
#print(dupes[[i]][1])
#file.move("C:/path/to/file/some_file.txt", "C:/some/other/path") #library(filesstrings)
#match(j,i)
}
}
for (i in 1:length(dupes)){
print(i)
for (j in 1:length(dupes[[i]][])){
print(j)
#print(dupes[[i]][1])
#file.move("C:/path/to/file/some_file.txt", "C:/some/other/path") #library(filesstrings)
#match(j,i)
}
}
for (i in 1:length(dupes)){
print(i)
for (j in 1:length(dupes[[i]][])){
print(j)
#print(dupes[[i]][1])
#file.move("C:/path/to/file/some_file.txt", "C:/some/other/path") #library(filesstrings)
#match(j,i)
}
}
library(stringr)
library(filesstrings)
for (i in 1:length(dupes)){
for (j in 1:length(dupes[[i]][])){
if (j > 1){
file.move(dupes[[i]][j], "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/testFolder") #library(filesstrings)
}
#print(j)
#match(j,i)
}
}
length(z3$"FALSE")
lengths(z3$"TRUE")
length(dupes)
length(z3$"TRUE")
length(z3$"FALSE")
head(z3$"TRUE")
dupes
library("digest")
library(digest)
pkg <- c("digest", "stringr", "filesstrings")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
library(digest)
library(stringr)
library(filesstrings)
setwd("D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContracts")
getwd()
pkg <- c("readtext", "quanteda", "openxlsx")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
suppressPackageStartupMessages(library(quanteda))
library(readtext)
library(openxlsx)
#loading dos ficheiros com o package readtext
folder <- "D:/Dropbox/0_ISEP/TDMEI/collectSmartContractsFromEtherscan/collectedContracts"
data <- readtext(paste0(folder, "/*.sol"))
data[1,1]
data[1,2]
docs <- corpus(data)
docs[1] # aceder ao nome do ficheiro
docs[[1]] # aceder ao codigo do ficheiro. igual a: texts(docs)[1]
summary(docs)
writeLines(as.character(docs[1]))
#Build a Document-Feature Matrix (DFM)
solidityWords = c("contract", "function", "library", "returns", "return", "address", "pragma", "pure", "public", "view", "solidity",
"require", "+", "=", "<", ">", "uint", "uint256", "uint8", "internal", "external", "payable", "bool", "memory", "bytes", "event",
"modifier", "for", "to", "_to", "from", "_from", "emit", "using", "constructor", "mapping", "is", "msg.sender", "|", "string",
"this", "true", "false", "if", "else", "revert", "indexed")
docs_dfm <- dfm(docs, tolower = TRUE, stem = FALSE, remove = solidityWords, remove_punct = TRUE, remove_numbers = TRUE)
docs_dfm
#Dicionario para procurar os padroes por ficheiro/contrato
myDict <- dictionary(list(token = c("token", "tokenisation"),
x_confirmation = c("x-confirmation", "x_confirmation", "xconfirmation", "blocksconfirmation", "blocks_confirmation", "blockconfirmation", "block_confirmation"),
mediator = c("mediator", "contractmediator", "contract_mediator", "contract-mediator"),
facade = c("facade", "contractfacade", "contract_facade", "contract-facade"),
forkCheck = c("amionthefork", "fork check", "forkcheck", "fork_check", "fork-check")
#multisig = c("access restriction", "accessrestriction", "multi-signature", "multisignature", "multisig")
#ownership = c("ownership", "authorization", "owned"),
#mutex = c("mutex"),
#oracle = c("oracle", "oraclizei", "oraclize"),
#legal = c("legal and smart contract pair"),
#checks = c("checks-effects-interaction"))
))
myDict
#spills_DFM <- dfm(docs, dictionary = myDict) #quanteda function: aplicado diretamente no array corpus puro sem limpezas
spills_DFM <- dfm(docs_dfm, dictionary = myDict) #quanteda function: aplicada na dfm ja com limpezas
spills_DFM
write.xlsx(spills_DFM, ".not_found_patterns.xlsx")
